#!/usr/bin/env node

// ‚úÖ Script para verificar que la sesi√≥n de usuario funcione correctamente
// Verifica que los componentes de navegaci√≥n y registro est√©n bien integrados

import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const projectRoot = path.resolve(__dirname, '..')

console.log('üîç VERIFICANDO INTEGRACI√ìN DE SESI√ìN DE USUARIO...\n')

// Verificar archivos cr√≠ticos para la sesi√≥n
const criticalFiles = [
  {
    path: 'src/components/navigation/UserNavMenu.vue',
    description: 'Componente de navegaci√≥n din√°mico',
    checks: [
      'useAuthStore',
      'isAuthenticated',
      'userRole',
      'logout'
    ]
  },
  {
    path: 'src/components/home/NavbarHome.vue',
    description: 'Navbar del home con integraci√≥n',
    checks: [
      'UserNavMenu',
      'import.*UserNavMenu'
    ]
  },
  {
    path: 'src/components/auth/UserInfoModal.vue',
    description: 'Modal de registro con carga de datos',
    checks: [
      'loadExistingUserData',
      'postponeRegistration',
      'onMounted',
      'Completar m√°s tarde'
    ]
  }
]

let hasErrors = false

for (const file of criticalFiles) {
  const filePath = path.join(projectRoot, file.path)
  
  console.log(`üìÅ Verificando: ${file.description}`)
  
  try {
    if (!fs.existsSync(filePath)) {
      console.log(`‚ùå ${file.path} - ARCHIVO NO EXISTE`)
      hasErrors = true
      continue
    }
    
    const content = fs.readFileSync(filePath, 'utf8')
    const missingChecks = []
    
    for (const check of file.checks) {
      const regex = new RegExp(check, 'i')
      if (!regex.test(content)) {
        missingChecks.push(check)
      }
    }
    
    if (missingChecks.length > 0) {
      console.log(`‚ùå ${file.path}:`)
      missingChecks.forEach(check => console.log(`   - Falta: ${check}`))
      hasErrors = true
    } else {
      console.log(`‚úÖ ${file.path} - TODAS LAS VERIFICACIONES PASARON`)
    }
    
  } catch (error) {
    console.log(`‚ùå ${file.path} - ERROR: ${error.message}`)
    hasErrors = true
  }
  
  console.log('')
}

// Verificar integraci√≥n en store de auth
console.log('üîç VERIFICANDO STORE DE AUTENTICACI√ìN...')
const authStorePath = path.join(projectRoot, 'src/store/auth.js')

try {
  if (fs.existsSync(authStorePath)) {
    const authContent = fs.readFileSync(authStorePath, 'utf8')
    
    const authChecks = [
      'isAuthenticated',
      'userInfo',
      'logout'
    ]
    
    const missingAuthChecks = authChecks.filter(check => !authContent.includes(check))
    
    if (missingAuthChecks.length > 0) {
      console.log('‚ùå Store de autenticaci√≥n:')
      missingAuthChecks.forEach(check => console.log(`   - Falta: ${check}`))
      hasErrors = true
    } else {
      console.log('‚úÖ Store de autenticaci√≥n - CORRECTO')
    }
  } else {
    console.log('‚ùå Store de autenticaci√≥n - ARCHIVO NO EXISTE')
    hasErrors = true
  }
} catch (error) {
  console.log(`‚ùå Store de autenticaci√≥n - ERROR: ${error.message}`)
  hasErrors = true
}

console.log('\n' + '='.repeat(60))

if (hasErrors) {
  console.log('‚ùå SE ENCONTRARON PROBLEMAS EN LA INTEGRACI√ìN')
  console.log('\nüîß PASOS PARA SOLUCIONAR:')
  console.log('1. Verificar que todos los imports est√©n correctos')
  console.log('2. Reiniciar el servidor de desarrollo: npm run dev')
  console.log('3. Limpiar cache del navegador: Ctrl+F5')
  console.log('4. Verificar que el usuario de prueba exista en Firebase')
  process.exit(1)
} else {
  console.log('‚úÖ INTEGRACI√ìN DE SESI√ìN COMPLETADA CORRECTAMENTE')
  console.log('\nüéØ FUNCIONALIDADES IMPLEMENTADAS:')
  console.log('‚úÖ Navegaci√≥n din√°mica seg√∫n estado de sesi√≥n')
  console.log('‚úÖ Avatar y men√∫ desplegable para usuarios autenticados')
  console.log('‚úÖ Opciones espec√≠ficas por rol (admin, vendedor, usuario)')
  console.log('‚úÖ Carga autom√°tica de datos existentes en registro')
  console.log('‚úÖ Opci√≥n para completar registro m√°s tarde')
  console.log('‚úÖ Bot√≥n de cerrar sesi√≥n integrado')
  
  console.log('\nüöÄ PR√ìXIMOS PASOS:')
  console.log('1. Probar con usuario: nico@gmail.com / 123456')
  console.log('2. Verificar que el navbar cambie al iniciar sesi√≥n')
  console.log('3. Verificar que el modal cargue datos existentes')
  console.log('4. Probar la funcionalidad "Completar m√°s tarde"')
}

console.log('='.repeat(60))
