// Script para configurar el sistema de soporte en Firestore
import { initializeApp } from "firebase/app";
import {
  getFirestore,
  doc,
  setDoc,
  collection,
  addDoc,
  serverTimestamp,
} from "firebase/firestore";

const firebaseConfig = {
  apiKey: "AIzaSyAFfjqq8YIfrduQpiYoMLGreId4vhkX08M",
  authDomain: "deunamaikostudios.firebaseapp.com",
  projectId: "deunamaikostudios",
  storageBucket: "deunamaikostudios.firebasestorage.app",
  messagingSenderId: "515483851699",
  appId: "1:515483851699:web:009b0b4885464ece0bc9c6",
};

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function setupSupportSystem() {
  console.log("üöÄ Configurando sistema de soporte...");

  try {
    // 1. Crear configuraci√≥n del sistema de soporte
    console.log("üìã Creando configuraci√≥n del sistema...");
    
    await setDoc(doc(db, "system_config", "support_settings"), {
      emailSupport: "soporte@maikostudios.com",
      autoResponseEnabled: true,
      maxTicketsPerUser: 10,
      ticketStatuses: {
        recibido: { label: "Recibido", color: "blue", icon: "üì®" },
        en_proceso: { label: "En proceso", color: "yellow", icon: "‚öôÔ∏è" },
        respondido: { label: "Respondido", color: "green", icon: "üí¨" },
        cerrado: { label: "Cerrado", color: "gray", icon: "‚úÖ" }
      },
      ticketSubjects: {
        qr_no_funciona: "No sirve el QR",
        problemas_premium: "Problemas Funci√≥n Premium",
        registro_tarjeta: "Registr√© mi tarjeta pero no aparece",
        problema_pago: "Problema con el pago",
        cuenta_bloqueada: "Mi cuenta est√° bloqueada",
        cambio_datos: "Quiero cambiar mis datos",
        otro: "Otro"
      },
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    });

    // 2. Crear templates de email
    console.log("üìß Creando templates de email...");
    
    await setDoc(doc(db, "system_config", "email_templates"), {
      ticketCreated: {
        subject: "[De Una] Ticket de Soporte Recibido #{ticketId}",
        template: "ticket_created_user",
        variables: ["ticketId", "userName", "asunto", "mensaje"]
      },
      ticketUpdated: {
        subject: "[De Una] Actualizaci√≥n de Ticket #{ticketId}",
        template: "ticket_updated_user",
        variables: ["ticketId", "userName", "estado", "comentarioAdmin"]
      },
      supportNotification: {
        subject: "[De Una] Nuevo Ticket de Soporte #{ticketId}",
        template: "ticket_created_support",
        variables: ["ticketId", "userName", "userEmail", "asunto", "mensaje"]
      },
      createdAt: serverTimestamp()
    });

    // 3. Crear FAQs iniciales
    console.log("‚ùì Creando FAQs iniciales...");
    
    const faqs = [
      {
        id: "faq_001",
        category: "account",
        question: "¬øC√≥mo creo una cuenta en De Una?",
        answer: "Para crear una cuenta: 1) Ve a la p√°gina de registro, 2) Completa tus datos personales, 3) Verifica tu correo electr√≥nico, 4) ¬°Listo!",
        order: 1,
        active: true,
        createdAt: serverTimestamp()
      },
      {
        id: "faq_002",
        category: "cards",
        question: "¬øCu√°ntas tarjetas puedo registrar?",
        answer: "Plan Gratuito: 1 tarjeta bancaria. Plan Premium: Hasta 5 tarjetas bancarias.",
        order: 2,
        active: true,
        createdAt: serverTimestamp()
      },
      {
        id: "faq_003",
        category: "qr",
        question: "¬øC√≥mo funciona el c√≥digo QR?",
        answer: "El c√≥digo QR permite compartir tus datos bancarios de forma segura. Genera tu QR desde el dashboard y comp√°rtelo con quien necesite transferirte dinero.",
        order: 3,
        active: true,
        createdAt: serverTimestamp()
      },
      {
        id: "faq_004",
        category: "premium",
        question: "¬øQu√© incluye el plan Premium?",
        answer: "El plan Premium incluye: hasta 5 tarjetas bancarias, estad√≠sticas detalladas, personalizaci√≥n avanzada, soporte prioritario y an√°lisis de visitas.",
        order: 4,
        active: true,
        createdAt: serverTimestamp()
      },
      {
        id: "faq_005",
        category: "technical",
        question: "El c√≥digo QR no funciona, ¬øqu√© hago?",
        answer: "Intenta: 1) Verificar conexi√≥n a internet, 2) Regenerar el c√≥digo QR, 3) Verificar que la tarjeta est√© activa, 4) Comprobar datos correctos.",
        order: 5,
        active: true,
        createdAt: serverTimestamp()
      }
    ];

    for (const faq of faqs) {
      await setDoc(doc(db, "faqs", faq.id), faq);
    }

    // 4. Crear ticket de ejemplo (para testing)
    console.log("üé´ Creando ticket de ejemplo...");
    
    const exampleTicket = {
      ticketId: "TK" + Date.now(),
      userId: "example_user_id",
      userEmail: "usuario@ejemplo.com",
      userName: "Usuario Ejemplo",
      asunto: "qr_no_funciona",
      mensaje: "Hola, tengo problemas con mi c√≥digo QR. No se puede escanear correctamente y no muestra mis datos bancarios. ¬øPodr√≠an ayudarme?",
      estado: "recibido",
      prioridad: "normal",
      fechaCreacion: serverTimestamp(),
      fechaActualizacion: serverTimestamp(),
      historial: [{
        accion: "creado",
        descripcion: "Ticket creado por el usuario",
        fecha: serverTimestamp(),
        autor: "usuario"
      }]
    };

    await addDoc(collection(db, "tickets"), exampleTicket);

    // 5. Crear notificaci√≥n de ejemplo
    console.log("üîî Creando notificaci√≥n de ejemplo...");
    
    const exampleNotification = {
      userId: "example_user_id",
      tipo: "ticket_creado",
      titulo: "Ticket de soporte creado",
      mensaje: `Tu ticket #${exampleTicket.ticketId} ha sido recibido. Te contactaremos pronto.`,
      ticketId: "example_ticket_id",
      icono: "üé´",
      fechaCreacion: serverTimestamp(),
      leida: false
    };

    await addDoc(collection(db, "notifications"), exampleNotification);

    // 6. Crear estad√≠sticas iniciales del sistema de soporte
    console.log("üìä Creando estad√≠sticas iniciales...");
    
    await setDoc(doc(db, "analytics", "support_stats"), {
      totalTickets: 1,
      ticketsByStatus: {
        recibido: 1,
        en_proceso: 0,
        respondido: 0,
        cerrado: 0
      },
      ticketsBySubject: {
        qr_no_funciona: 1,
        problemas_premium: 0,
        registro_tarjeta: 0,
        problema_pago: 0,
        cuenta_bloqueada: 0,
        cambio_datos: 0,
        otro: 0
      },
      averageResponseTime: 0,
      satisfactionRating: 0,
      lastUpdated: serverTimestamp()
    });

    // 7. Crear configuraci√≥n de notificaciones
    console.log("üîî Configurando sistema de notificaciones...");
    
    await setDoc(doc(db, "system_config", "notifications_settings"), {
      enableEmailNotifications: true,
      enablePushNotifications: false,
      notificationTypes: {
        ticket_creado: {
          enabled: true,
          emailTemplate: "ticket_created",
          pushEnabled: false
        },
        ticket_actualizado: {
          enabled: true,
          emailTemplate: "ticket_updated",
          pushEnabled: false
        },
        premium_expiring: {
          enabled: true,
          emailTemplate: "premium_expiring",
          pushEnabled: true
        }
      },
      createdAt: serverTimestamp()
    });

    console.log("‚úÖ Sistema de soporte configurado exitosamente!");
    console.log("\nüìã Resumen de configuraci√≥n:");
    console.log("- ‚úÖ Configuraci√≥n del sistema");
    console.log("- ‚úÖ Templates de email");
    console.log("- ‚úÖ FAQs iniciales (5 preguntas)");
    console.log("- ‚úÖ Ticket de ejemplo");
    console.log("- ‚úÖ Notificaci√≥n de ejemplo");
    console.log("- ‚úÖ Estad√≠sticas iniciales");
    console.log("- ‚úÖ Configuraci√≥n de notificaciones");
    
    console.log("\nüöÄ Pr√≥ximos pasos:");
    console.log("1. Configurar Cloud Functions para emails");
    console.log("2. Actualizar reglas de Firestore");
    console.log("3. Probar creaci√≥n de tickets");
    console.log("4. Verificar env√≠o de emails");

  } catch (error) {
    console.error("‚ùå Error configurando sistema de soporte:", error);
  }
}

// Ejecutar configuraci√≥n
setupSupportSystem();
