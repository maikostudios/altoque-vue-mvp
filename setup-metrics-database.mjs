// Script para configurar la estructura de m√©tricas en Firebase
import { initializeApp } from "firebase/app";
import {
  getFirestore,
  doc,
  setDoc,
  collection,
  getDocs,
  serverTimestamp,
} from "firebase/firestore";

const firebaseConfig = {
  apiKey: "AIzaSyAFfjqq8YIfrduQpiYoMLGreId4vhkX08M",
  authDomain: "deunamaikostudios.firebaseapp.com",
  projectId: "deunamaikostudios",
  storageBucket: "deunamaikostudios.firebasestorage.app",
  messagingSenderId: "515483851699",
  appId: "1:515483851699:web:009b0b4885464ece0bc9c6",
};

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function setupMetricsDatabase() {
  try {
    console.log("üöÄ Configurando estructura de m√©tricas...");

    // 1. Crear m√©tricas globales iniciales
    console.log("üìä Creando m√©tricas globales...");

    // Contar usuarios existentes
    const usersSnapshot = await getDocs(collection(db, "users"));
    const totalUsuarios = usersSnapshot.size;

    // Contar tarjetas existentes
    const cardsSnapshot = await getDocs(collection(db, "bank_cards"));
    const totalTarjetas = cardsSnapshot.size;

    await setDoc(doc(db, "metrics", "global"), {
      totalUsuarios: totalUsuarios,
      totalTarjetas: totalTarjetas,
      visitasDatosTransferencia: 0,
      datosCopiadosTotal: 0,
      usuariosActivos: totalUsuarios,
      tarjetasActivas: totalTarjetas,
      fechaCreacion: serverTimestamp(),
      fechaActualizacion: serverTimestamp(),
    });

    console.log(`‚úÖ M√©tricas globales creadas:`);
    console.log(`   - Total usuarios: ${totalUsuarios}`);
    console.log(`   - Total tarjetas: ${totalTarjetas}`);
    console.log(`   - Visitas datos transferencia: 0`);
    console.log(`   - Datos copiados total: 0`);

    // 2. Crear m√©tricas iniciales para usuarios existentes
    console.log("\nüë• Creando m√©tricas para usuarios existentes...");

    let userMetricsCreated = 0;

    for (const userDoc of usersSnapshot.docs) {
      const userData = userDoc.data();

      await setDoc(doc(db, "user_metrics", userDoc.id), {
        userId: userDoc.id,
        userEmail: userData.email,
        visitasPagina: 0,
        datosCopiadosCount: 0,
        primeraVisita: null,
        ultimaVisita: null,
        primerCopy: null,
        ultimoCopy: null,
        fechaCreacion: serverTimestamp(),
      });

      userMetricsCreated++;
      console.log(`   ‚úÖ M√©tricas creadas para: ${userData.email}`);
    }

    // 3. Crear documento de configuraci√≥n de m√©tricas
    console.log("\n‚öôÔ∏è Creando configuraci√≥n de m√©tricas...");

    await setDoc(doc(db, "settings", "metrics"), {
      trackingEnabled: true,
      retentionDays: 365, // Mantener m√©tricas por 1 a√±o
      anonymizeAfterDays: 90, // Anonimizar datos despu√©s de 90 d√≠as
      batchUpdateInterval: 300, // Actualizar m√©tricas cada 5 minutos
      enableUserMetrics: true,
      enableGlobalMetrics: true,
      enableRealTimeUpdates: true,
      enableDetailedAnalytics: true, // Habilitar analytics detallados
      enableDeviceTracking: true, // Habilitar tracking de dispositivos
      enableBankTracking: true, // Habilitar tracking de bancos
      enableRegionTracking: true, // Habilitar tracking por regi√≥n
      lastMaintenanceDate: serverTimestamp(),
      fechaCreacion: serverTimestamp(),
    });

    // 4. Crear colecciones de ejemplo para analytics detallados
    console.log("\nüìä Creando estructura para analytics detallados...");

    // Crear documento de ejemplo para detailed_visits
    await setDoc(doc(db, "detailed_visits", "example"), {
      userToken: "example_token",
      userId: "example_user_id",
      userEmail: "example@example.com",
      userRegion: "Regi√≥n Metropolitana",
      timestamp: serverTimestamp(),
      device: "mobile",
      browser: "Chrome",
      userAgent: "Mozilla/5.0...",
      screenResolution: "1920x1080",
      timezone: "America/Santiago",
      language: "es-ES",
      isExample: true,
    });

    // Crear documento de ejemplo para bank_usage
    await setDoc(doc(db, "bank_usage", "example"), {
      userId: "example_user_id",
      userEmail: "example@example.com",
      userRegion: "Regi√≥n Metropolitana",
      bankName: "Banco de Chile",
      cardType: "Cuenta Corriente",
      timestamp: serverTimestamp(),
      device: "mobile",
      isExample: true,
    });

    // 4. Crear √≠ndices de ejemplo para consultas eficientes
    console.log("\nüìà Configuraci√≥n de m√©tricas completada");

    console.log("\nüéØ Resumen de la configuraci√≥n:");
    console.log(`   üìä M√©tricas globales: ‚úÖ Configuradas`);
    console.log(
      `   üë• M√©tricas de usuarios: ‚úÖ ${userMetricsCreated} usuarios`
    );
    console.log(`   ‚öôÔ∏è Configuraci√≥n: ‚úÖ Establecida`);

    console.log("\nüìã Estructura de colecciones creadas:");
    console.log("   - metrics/global: Contadores globales del sistema");
    console.log(
      "   - user_metrics/{userId}: M√©tricas individuales por usuario"
    );
    console.log("   - settings/metrics: Configuraci√≥n del sistema de m√©tricas");
    console.log(
      "   - detailed_visits: Visitas detalladas con datos de dispositivo y regi√≥n"
    );
    console.log("   - bank_usage: Uso de bancos por usuario y regi√≥n");

    console.log("\nüîÑ Pr√≥ximos pasos:");
    console.log(
      "   1. Las m√©tricas se actualizar√°n autom√°ticamente con el uso"
    );
    console.log("   2. Los contadores se incrementar√°n en tiempo real");
    console.log("   3. Los dashboards mostrar√°n datos actualizados");

    console.log("\n‚ú® ¬°Configuraci√≥n de m√©tricas completada exitosamente!");
  } catch (error) {
    console.error("‚ùå Error configurando m√©tricas:", error);
    process.exit(1);
  }
}

// Funci√≥n para verificar la estructura existente
async function verifyMetricsStructure() {
  try {
    console.log("\nüîç Verificando estructura de m√©tricas...");

    // Verificar m√©tricas globales
    const globalMetricsDoc = await getDocs(collection(db, "metrics"));
    console.log(`   üìä Documentos en metrics: ${globalMetricsDoc.size}`);

    // Verificar m√©tricas de usuarios
    const userMetricsDoc = await getDocs(collection(db, "user_metrics"));
    console.log(`   üë• Documentos en user_metrics: ${userMetricsDoc.size}`);

    // Verificar configuraci√≥n
    const settingsDoc = await getDocs(collection(db, "settings"));
    console.log(`   ‚öôÔ∏è Documentos en settings: ${settingsDoc.size}`);

    console.log("‚úÖ Verificaci√≥n completada");
  } catch (error) {
    console.error("‚ùå Error verificando estructura:", error);
  }
}

// Ejecutar configuraci√≥n
async function main() {
  console.log("üéØ CONFIGURACI√ìN DE SISTEMA DE M√âTRICAS");
  console.log("=====================================");

  await setupMetricsDatabase();
  await verifyMetricsStructure();

  console.log("\nüèÅ Proceso completado");
  process.exit(0);
}

main().catch(console.error);
